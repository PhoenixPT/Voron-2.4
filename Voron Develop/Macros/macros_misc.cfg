#####################################################################
#       MISC
#####################################################################

[gcode_macro AG32]
gcode:
    {action_respond_info("Running Adaptive G32...")}
    LIGHTS PRESET=BUSY                                                                                                      ; Set lights to busy
    BED_MESH_CLEAR
    CG28
    QUAD_GANTRY_LEVEL

[gcode_macro G32]
gcode:
    {action_respond_info("Running G32...")}
    LIGHTS PRESET=PRINTING
    BED_MESH_CLEAR
    CG28
    QUAD_GANTRY_LEVEL
    BED_MESH_CALIBRATE
    G28 Z

[gcode_macro RESET_SPEEDS_FEEDS]
description: Reset printer speeds and feeds to what is defined in the config file PERAMS: NONE
gcode:
    {% set bypass = params.BYPASS|default(0)|int %}

    {% if bypass == 1 %}
        {action_respond_info("Not resetting speeds and feeds. BYPASS enabled!")}
    {% else %}
        {action_respond_info("WARNING: RESETTING ALL SPEEDS AND FEEDS TO DEFAULT!!! IF YOU ARE TUNING YOU WILL WANT TO SEND OVERRIDES AGAIN!!!")}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity}
        SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}
        M221 S100                                                                                                               ; Reset flow rate to 100%
        M220 S100                                                                                                               ; reset speed multiplier
    {% endif %}

[gcode_macro STOP_DELAYED_GCODE]
description: Stop defined delayed gcode Perams: NONE
gcode:
    {action_respond_info("Stopping all DELAYED GCODE...")}
    UPDATE_DELAYED_GCODE ID=DELAYED_IDLE_LIGHTS DURATION=0
    UPDATE_DELAYED_GCODE ID=DELAYED_FANS_OFF DURATION=0
    UPDATE_DELAYED_GCODE ID=DELAYED_MCU_OFF DURATION=0
    UPDATE_DELAYED_GCODE ID=DELAYED_LIGHTS_OFF DURATION=0
    UPDATE_DELAYED_GCODE ID=PRINT_COOLDOWN_LOOP DURATION=0
    UPDATE_DELAYED_GCODE ID=DELAYED_DISABLE_STEPPERS DURATION=0
    UPDATE_DELAYED_GCODE ID=BED_FANS_LOOP DURATION=0
    UPDATE_DELAYED_GCODE ID=READY_TO_PRINT_LOOP DURATION=0

[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
    {% set parameters = ["printer.configfile.warnings:"] %}

    {% for name1 in printer.configfile.warnings %}
        {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (name1.type, name1.section, name1.option, name1.message)) %}
    {% endfor %}
    {action_respond_info(parameters|join("\n"))}

[gcode_macro SET_PADVANCE]
description: Set presure advance to specified value PERAMS: V
gcode:
    {% set value = params.V|default(0)|float %}

    {% if value == 0 %}
        {% set value = printer.configfile.settings.extruder.pressure_advance %}
    {% endif %}
    {action_respond_info("Setting Presure Advance to %.6f..." % (value)) }
    SET_PRESSURE_ADVANCE ADVANCE={value}

[gcode_macro WAIT]
description: Wait a specified number of seconds. PERAMS: S
gcode:
    {% set seconds = params.S|default(0)|int %}

    {% if seconds == 0 %}
        {action_respond_info("No amount of time was specifed! Not Waiting!") }
    {% else %}
        {action_respond_info("Waiting %.0f seconds..." % (seconds)) }
        G4 P{seconds * 1000}
    {% endif %}

[gcode_macro RETRACT]
description: Retract a specific amount. PERAMS: A
gcode:
    {% set amount = params.A|default(0)|float %}

    SAVE_GCODE_STATE NAME=RETRACT
    {% if amount > 0 %}
        {action_respond_info("Retraction is greater than 0! Not retracting!") }
    {% else %}
        {action_respond_info("Retracting %.2fmm..." % (amount)) }
        G92 E0
        G1 E-3 F2100
        G1 E{amount} F600
        G92 E0
    {% endif %}
    RESTORE_GCODE_STATE NAME=RETRACT

[gcode_macro ADJUST_Z_OFFSET]
description: Adjust the Z offset. Typically used for different plates. PERAMS: OS
gcode:
    {% set offset = params.OS|default(0)|float %}

    {% if offset == 0 %}
        {action_respond_info("Offset is 0! Not making any adjustments!") }
    {% else %}
        {action_respond_info("Adjusting offset by %.3fmm..." % (offset)) }
        SET_GCODE_OFFSET Z_ADJUST={offset} MOVE=1
    {% endif %}

[gcode_macro _CHAMBER_BED_CHECK]
description: Check to see if the chamber/bed loop needs to be called. PERAMS: NONE
gcode:
    {% set chamber = printer["temperature_sensor chamber"] %}
    {% set heater_bed = printer["heater_bed"] %}

    {% if (chamber.temperature >= 50) and (heater_bed.temperature|int >= (heater_bed.target|int - 1)) %}
        {action_respond_info("Not running READY_TO_PRINT_LOOP as the printer is already at temp") }
        LIGHTS PRESET=PRINT_READY
    {% else %}
        UPDATE_DELAYED_GCODE ID=READY_TO_PRINT_LOOP DURATION=5
    {% endif %}

[gcode_macro DUMP_PARAMETERS]
description: Dumps all Klipper parameters to the console. This helps to find Klipper system variables for use in macros. PERAMS: NONE
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}
