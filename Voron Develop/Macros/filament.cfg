#####################################################################
#       FILAMENT MACROS
#####################################################################

[gcode_macro FILAMENT_DETECT]
description: Detect filament types handler PERAMS: FILAMENT
gcode:
    {% set filament = params.FILAMENT|default(ABS)|string %}
    {% set event = params.EVENT|default(START)|string %}

    {action_respond_info("FILAMENT_DETECT: %s detected. EVENT: %s" % (filament, event))}

    {% if 'START' in event %}
        {action_respond_info("FILAMENT_DETECT: Begin event %s " % (event))}
        {% if 'ABS' in filament or 'ABS+' in filament
        or 'ASA' in filament or 'PC' in filament or 'PCCF' in filament %}
            VOC_FAN S=100
            BED_FANS S=30
            SET_EXTRUDER_CONT TEMP=190
            SET_PADVANCE V=0.040
            UPDATE_DELAYED_GCODE ID=FILAMENT_BOX_CTL_LOOP DURATION=1
            UPDATE_DELAYED_GCODE ID=BED_FANS_LOOP DURATION=1
        {% elif 'PLA' in filament or 'PETG' in filament or 'HTPLA' in filament
        or 'TPU' in filament %}
            VOC_FAN S=0
            BED_FANS S=0
            SET_EXTRUDER_CONT TEMP=150
            SET_PADVANCE V=0.035
            UPDATE_DELAYED_GCODE ID=FILAMENT_BOX_CTL_LOOP DURATION=1
        {% else %}
            {action_respond_info("No filament type passed. EVENT: %s" % (event))}
            VOC_FAN S=0
            BED_FANS S=0
            SET_EXTRUDER_CONT TEMP=150
            UPDATE_DELAYED_GCODE ID=FILAMENT_BOX_CTL_LOOP DURATION=1
        {% endif %}

    {% elif 'END' in event %}
        {action_respond_info("FILAMENT_DETECT: Begin event %s " % (event))}
        {% if 'ABS' in filament or 'ABS+' in filament
        or 'ASA' in filament or 'PC' in filament or 'PCCF' in filament %}
            VOC_FAN S=100
            BED_FANS S=100
            UPDATE_DELAYED_GCODE ID=BED_FANS_LOOP DURATION=0
            UPDATE_DELAYED_GCODE ID=DELAYED_FANS_OFF DURATION=300
        {% elif 'PLA' in filament or 'PETG' in filament or 'HTPLA' in filament
        or 'TPU' in filament %}
            VOC_FAN FSPEED=0
            UPDATE_DELAYED_GCODE ID=DELAYED_FANS_OFF DURATION=300
        {% else %}
            {action_respond_info("No filament type passed. EVENT: %s" % (event))}
        {% endif %}
    {% endif %}

[gcode_macro FILAMENT_RUNOUT]
gcode:
    {action_respond_info("Filament RUNOUT/JAM triggered...")}
    RESPOND PREFIX=mooncord.broadcast MSG="Filament RUNOUT/JAM triggered..."

[gcode_macro SFS_DISABLE]
description: Disable smart filament sensor PERAMS: NONE
gcode:
    {action_respond_info("DISABLING the Smart Filament Sensor...")}
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0

[gcode_macro SFS_ENABLE]
description: Enable smart filament sensor PERAMS: NONE
gcode:
    {action_respond_info("ENABLING the Smart Filament Sensor...")}
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {action_respond_info("Unloading filament...")}
    SAVE_GCODE_STATE NAME=UNLOADFILAMENT
    M83                                                                                                                     ; set extruder to relative
    G1 E10 F600                                                                                                             ; extrude a little to soften tip
    G1 E-100 F900                                                                                                           ; retract filament completely
    SFS_DISABLE
    RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
description: Load filament PERAMS: DISTANCE
gcode:
    {% set DISTANCE = params.DISTANCE|default(120)|float %}

    {action_respond_info("Loading filament...")}
    SAVE_GCODE_STATE NAME=LOADFILAMENT
    M83                                                                                                                     ; set extruder to relative
    G1 E{DISTANCE} F500
    G1 E-.75
    SFS_DISABLE
    RESTORE_GCODE_STATE NAME=LOADFILAMENT

[gcode_macro LOAD_SWAP]
description: Load filament and prepare for the next print PERAMS: DISTANCE
gcode:
    {% set DISTANCE = params.DISTANCE|default(150)|float %}

    {action_respond_info("Loading and preping filament for printing...")}
    SET_EXTRUDER_WAIT TEMP=265
    LOAD_FILAMENT DISTANCE={DISTANCE}
    RETRACT A=-20
    WAIT S=15
    SET_EXTRUDER_CONT TEMP=0
    CLEAN_NOZZLE W=3

[gcode_macro HOT_UNLOAD]
gcode:
    {% set t = params.T|default(240)|int %}

    {action_respond_info("Hot unload called...")}
    M104 S{t}
    PARKFRONT
    M109 S{t}
    UNLOAD_FILAMENT

[gcode_macro HOT_LOAD]
gcode:
    {% set t = params.T|default(240)|int %}

    {action_respond_info("Hot load called...")}
    M104 S{t}
    PARKFRONT
    M109 S{t}
    LOAD_FILAMENT

[gcode_macro FILAMENT_BOX]
description: Set Filament Box temperature. Perams: T
gcode:
    {% set temp = params.T|default(80)|float %}

    {action_respond_info("Setting filament dryer to %s C" % (temp))}
    SET_HEATER_TEMPERATURE HEATER=filament_box TARGET={temp}

[gcode_macro DISABLE_FILAMENT_BOX_CTL_LOOP]
description: Disable filament box control loop. Perams: NONE
gcode:
    {action_respond_info("Filament box control loop DISABLED...") }
    UPDATE_DELAYED_GCODE ID=FILAMENT_BOX_CTL_LOOP DURATION=0

[gcode_macro M600]
description: Call for filament change. Perams: NONE
gcode:
    {action_respond_info("Filament change %(M600%) called.") }
    RESPOND PREFIX=mooncord.broadcast MSG="Filament change (M600) called!"
    PAUSE
