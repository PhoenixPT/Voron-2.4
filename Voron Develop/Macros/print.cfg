#####################################################################
#       PRINT MACROS
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SB-leds to homing-mode
  G28                   # Full home (XYZ)
  G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    SET_PIN PIN=nevermore VALUE=1                       # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  # Quad gantry level AKA QGL
  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  quad_gantry_level               # Levels the buildplate via QGL
  G28 Z                           # Homes Z again after QGL

  ##  Uncomment for Klicky auto-z
  #CALIBRATE_Z                                 # Calibrates Z-offset with klicky
  #SET_DISPLAY_TEXT MSG="Z-offset"             # Displays info

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  bed_mesh_calibrate                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 
  VORON_PURGE                                      # Purge
  G90                                              # Absolut position
  
  
[gcode_macro PRINT_END]
gcode:
    {action_respond_info("Running PRINT END...")}
    {% set z = params.Z|default(20)|int %}                                                                                  ; lift z amount
    M400                                                                                                                    ; wait for buffer to clear
    G91                                                                                                                     ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000                                                                                             ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    UPDATE_DELAYED_GCODE ID=FILAMENT_BOX_CTL_LOOP DURATION=1
    M107                                                                                                                    ; turn off fan
    {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}                                          ; check that lift z doesn't exceed z max
            G1 Z{z} F3000                                                                                                   ; raise Z up by lift z amount
        {% else %}
            { action_respond_info("PRINT_END: Lift z exceeds maximum Z height.") }                                          ; if z max is exceeded, show message and set zhop value for resume to 0
        {% endif %}
    G90                                                                                                                     ; absolute positioning
    RETRACT A=-20                                                                                                           ; Retract an additional amount
    G0  X125 Y250 F3600                                                                                                     ; park nozzle at rear
    BED_MESH_CLEAR
    SFS_DISABLE
    FILAMENT_DETECT FILAMENT={params.FILAMENT} EVENT=END
    STATUS_READY                                                                        ; Set Print Complete Lights
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                             ; set timeout back to configured value
    UPDATE_DELAYED_GCODE ID=PRINT_COOLDOWN_LOOP DURATION=300                                                                ; Start print cooldown loop
    UPDATE_DELAYED_GCODE ID=DELAYED_DISABLE_STEPPERS DURATION=3600                                                          ; Disable steppers after 1hr of print completion
    UPDATE_DELAYED_GCODE ID=DELAYED_IDLE_LIGHTS DURATION=3600                                                               ; Set Idle lights after 1hr of print completion
    RESET_SPEEDS_FEEDS                                                                                                      ; Reset all speeds and feeds because I forget

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    {action_respond_info("Running PRINT CANCEL...")}
    STATUS_READY
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    G91                                                                                                                     ; relative positioning
    G1 Z40 F3000                                                                                                            ; move nozzle up 40mm
    G90                                                                                                                     ; absolute positioning
    G0  X125 Y250 F3600                                                                                                     ; park nozzle at rear
    RETRACT A=-20                                                                                                           ; Retract an additional amount
    M107                                                                                                                    ; turn off fan
    SFS_DISABLE
    BED_MESH_CLEAR
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                             ; set timeout back to configured value
    UPDATE_DELAYED_GCODE ID=PRINT_COOLDOWN_LOOP DURATION=300                                                                ; Start print cooldown loop
    UPDATE_DELAYED_GCODE ID=DELAYED_DISABLE_STEPPERS DURATION=3600                                                          ; Disable steppers after 1hr of print completion
    UPDATE_DELAYED_GCODE ID=DELAYED_IDLE_LIGHTS DURATION=3600                                                               ; Set Idle lights after 1hr of print completion
    RESET_SPEEDS_FEEDS                                                                                                      ; Reset all speeds and feeds because I forget

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {action_respond_info("Running PAUSE...")}
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                                                  ; lift z amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                                                             ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}                                   ; set hotend temp variable for reference in resume macro
        SFS_DISABLE                                                                                                         ; disable filament sensor
        STATUS_BUSY                                                                                                ; set lights to a paused state
        SAVE_GCODE_STATE NAME=PAUSE                                                                                         ; save current print position for resume
        BASE_PAUSE                                                                                                          ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}                                      ; check that zhop doesn't exceed z max
            G91                                                                                                             ; relative positioning
            G1 Z{z} F900                                                                                                    ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("PAUSE: Pause zhop exceeds maximum Z height.") }                                          ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                                                 ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500                                 ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                                                             ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                                                      ; set timeout to 12 hours
  {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {action_respond_info("Running RESUME...")}
    # Parameters
    {% set e = params.E|default(2)|int %}

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SFS_ENABLE                                                                                                          ; enable filament sensor
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                         ; set timeout back to configured value
        {% if etemp > 0 %}
            STATUS_HEATING
            SET_EXTRUDER_WAIT TEMP={etemp|int}                                                                              ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450                                                            ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                                                                 ; relative positioning
        M83                                                                                                                 ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                                                       ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                                                            ; lower Z back down	without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        STATUS_PRINTING
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450                                                                ; restore position
        UPDATE_DELAYED_GCODE ID=HEATER_FAN_MONITOR DURATION=3                                                               ; Resume heater fan monitoring
        BASE_RESUME                                                                                                         ; resume print
    {% endif %}
